/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package abacus.api.query;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ExplanationTree implements org.apache.thrift.TBase<ExplanationTree, ExplanationTree._Fields>, java.io.Serializable, Cloneable, Comparable<ExplanationTree> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExplanationTree");

  private static final org.apache.thrift.protocol.TField EXPLANATION_FIELD_DESC = new org.apache.thrift.protocol.TField("explanation", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("children", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExplanationTreeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExplanationTreeTupleSchemeFactory());
  }

  public Explanation explanation; // optional
  public List<Explanation> children; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXPLANATION((short)1, "explanation"),
    CHILDREN((short)2, "children");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXPLANATION
          return EXPLANATION;
        case 2: // CHILDREN
          return CHILDREN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.EXPLANATION,_Fields.CHILDREN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXPLANATION, new org.apache.thrift.meta_data.FieldMetaData("explanation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Explanation.class)));
    tmpMap.put(_Fields.CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("children", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Explanation.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExplanationTree.class, metaDataMap);
  }

  public ExplanationTree() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExplanationTree(ExplanationTree other) {
    if (other.isSetExplanation()) {
      this.explanation = new Explanation(other.explanation);
    }
    if (other.isSetChildren()) {
      List<Explanation> __this__children = new ArrayList<Explanation>(other.children.size());
      for (Explanation other_element : other.children) {
        __this__children.add(new Explanation(other_element));
      }
      this.children = __this__children;
    }
  }

  public ExplanationTree deepCopy() {
    return new ExplanationTree(this);
  }

  @Override
  public void clear() {
    this.explanation = null;
    this.children = null;
  }

  public Explanation getExplanation() {
    return this.explanation;
  }

  public ExplanationTree setExplanation(Explanation explanation) {
    this.explanation = explanation;
    return this;
  }

  public void unsetExplanation() {
    this.explanation = null;
  }

  /** Returns true if field explanation is set (has been assigned a value) and false otherwise */
  public boolean isSetExplanation() {
    return this.explanation != null;
  }

  public void setExplanationIsSet(boolean value) {
    if (!value) {
      this.explanation = null;
    }
  }

  public int getChildrenSize() {
    return (this.children == null) ? 0 : this.children.size();
  }

  public java.util.Iterator<Explanation> getChildrenIterator() {
    return (this.children == null) ? null : this.children.iterator();
  }

  public void addToChildren(Explanation elem) {
    if (this.children == null) {
      this.children = new ArrayList<Explanation>();
    }
    this.children.add(elem);
  }

  public List<Explanation> getChildren() {
    return this.children;
  }

  public ExplanationTree setChildren(List<Explanation> children) {
    this.children = children;
    return this;
  }

  public void unsetChildren() {
    this.children = null;
  }

  /** Returns true if field children is set (has been assigned a value) and false otherwise */
  public boolean isSetChildren() {
    return this.children != null;
  }

  public void setChildrenIsSet(boolean value) {
    if (!value) {
      this.children = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXPLANATION:
      if (value == null) {
        unsetExplanation();
      } else {
        setExplanation((Explanation)value);
      }
      break;

    case CHILDREN:
      if (value == null) {
        unsetChildren();
      } else {
        setChildren((List<Explanation>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXPLANATION:
      return getExplanation();

    case CHILDREN:
      return getChildren();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXPLANATION:
      return isSetExplanation();
    case CHILDREN:
      return isSetChildren();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExplanationTree)
      return this.equals((ExplanationTree)that);
    return false;
  }

  public boolean equals(ExplanationTree that) {
    if (that == null)
      return false;

    boolean this_present_explanation = true && this.isSetExplanation();
    boolean that_present_explanation = true && that.isSetExplanation();
    if (this_present_explanation || that_present_explanation) {
      if (!(this_present_explanation && that_present_explanation))
        return false;
      if (!this.explanation.equals(that.explanation))
        return false;
    }

    boolean this_present_children = true && this.isSetChildren();
    boolean that_present_children = true && that.isSetChildren();
    if (this_present_children || that_present_children) {
      if (!(this_present_children && that_present_children))
        return false;
      if (!this.children.equals(that.children))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ExplanationTree other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExplanation()).compareTo(other.isSetExplanation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExplanation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.explanation, other.explanation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildren()).compareTo(other.isSetChildren());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildren()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.children, other.children);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExplanationTree(");
    boolean first = true;

    if (isSetExplanation()) {
      sb.append("explanation:");
      if (this.explanation == null) {
        sb.append("null");
      } else {
        sb.append(this.explanation);
      }
      first = false;
    }
    if (isSetChildren()) {
      if (!first) sb.append(", ");
      sb.append("children:");
      if (this.children == null) {
        sb.append("null");
      } else {
        sb.append(this.children);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (explanation != null) {
      explanation.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExplanationTreeStandardSchemeFactory implements SchemeFactory {
    public ExplanationTreeStandardScheme getScheme() {
      return new ExplanationTreeStandardScheme();
    }
  }

  private static class ExplanationTreeStandardScheme extends StandardScheme<ExplanationTree> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExplanationTree struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXPLANATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.explanation = new Explanation();
              struct.explanation.read(iprot);
              struct.setExplanationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHILDREN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.children = new ArrayList<Explanation>(_list52.size);
                for (int _i53 = 0; _i53 < _list52.size; ++_i53)
                {
                  Explanation _elem54;
                  _elem54 = new Explanation();
                  _elem54.read(iprot);
                  struct.children.add(_elem54);
                }
                iprot.readListEnd();
              }
              struct.setChildrenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExplanationTree struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.explanation != null) {
        if (struct.isSetExplanation()) {
          oprot.writeFieldBegin(EXPLANATION_FIELD_DESC);
          struct.explanation.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.children != null) {
        if (struct.isSetChildren()) {
          oprot.writeFieldBegin(CHILDREN_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.children.size()));
            for (Explanation _iter55 : struct.children)
            {
              _iter55.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExplanationTreeTupleSchemeFactory implements SchemeFactory {
    public ExplanationTreeTupleScheme getScheme() {
      return new ExplanationTreeTupleScheme();
    }
  }

  private static class ExplanationTreeTupleScheme extends TupleScheme<ExplanationTree> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExplanationTree struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExplanation()) {
        optionals.set(0);
      }
      if (struct.isSetChildren()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetExplanation()) {
        struct.explanation.write(oprot);
      }
      if (struct.isSetChildren()) {
        {
          oprot.writeI32(struct.children.size());
          for (Explanation _iter56 : struct.children)
          {
            _iter56.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExplanationTree struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.explanation = new Explanation();
        struct.explanation.read(iprot);
        struct.setExplanationIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.children = new ArrayList<Explanation>(_list57.size);
          for (int _i58 = 0; _i58 < _list57.size; ++_i58)
          {
            Explanation _elem59;
            _elem59 = new Explanation();
            _elem59.read(iprot);
            struct.children.add(_elem59);
          }
        }
        struct.setChildrenIsSet(true);
      }
    }
  }

}

