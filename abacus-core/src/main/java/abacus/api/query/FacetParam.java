/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package abacus.api.query;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FacetParam implements org.apache.thrift.TBase<FacetParam, FacetParam._Fields>, java.io.Serializable, Cloneable, Comparable<FacetParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FacetParam");

  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_NUM_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("maxNumValues", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MIN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("minCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FacetParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FacetParamTupleSchemeFactory());
  }

  /**
   * 
   * @see FacetSortMode
   */
  public FacetSortMode mode; // optional
  public int maxNumValues; // optional
  public int minCount; // optional
  public List<String> path; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see FacetSortMode
     */
    MODE((short)1, "mode"),
    MAX_NUM_VALUES((short)2, "maxNumValues"),
    MIN_COUNT((short)3, "minCount"),
    PATH((short)4, "path");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODE
          return MODE;
        case 2: // MAX_NUM_VALUES
          return MAX_NUM_VALUES;
        case 3: // MIN_COUNT
          return MIN_COUNT;
        case 4: // PATH
          return PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXNUMVALUES_ISSET_ID = 0;
  private static final int __MINCOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MODE,_Fields.MAX_NUM_VALUES,_Fields.MIN_COUNT,_Fields.PATH};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FacetSortMode.class)));
    tmpMap.put(_Fields.MAX_NUM_VALUES, new org.apache.thrift.meta_data.FieldMetaData("maxNumValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("minCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FacetParam.class, metaDataMap);
  }

  public FacetParam() {
    this.mode = abacus.api.query.FacetSortMode.HITS_DESC;

    this.maxNumValues = 5;

    this.minCount = 1;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FacetParam(FacetParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMode()) {
      this.mode = other.mode;
    }
    this.maxNumValues = other.maxNumValues;
    this.minCount = other.minCount;
    if (other.isSetPath()) {
      List<String> __this__path = new ArrayList<String>(other.path);
      this.path = __this__path;
    }
  }

  public FacetParam deepCopy() {
    return new FacetParam(this);
  }

  @Override
  public void clear() {
    this.mode = abacus.api.query.FacetSortMode.HITS_DESC;

    this.maxNumValues = 5;

    this.minCount = 1;

    this.path = null;
  }

  /**
   * 
   * @see FacetSortMode
   */
  public FacetSortMode getMode() {
    return this.mode;
  }

  /**
   * 
   * @see FacetSortMode
   */
  public FacetParam setMode(FacetSortMode mode) {
    this.mode = mode;
    return this;
  }

  public void unsetMode() {
    this.mode = null;
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return this.mode != null;
  }

  public void setModeIsSet(boolean value) {
    if (!value) {
      this.mode = null;
    }
  }

  public int getMaxNumValues() {
    return this.maxNumValues;
  }

  public FacetParam setMaxNumValues(int maxNumValues) {
    this.maxNumValues = maxNumValues;
    setMaxNumValuesIsSet(true);
    return this;
  }

  public void unsetMaxNumValues() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXNUMVALUES_ISSET_ID);
  }

  /** Returns true if field maxNumValues is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxNumValues() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXNUMVALUES_ISSET_ID);
  }

  public void setMaxNumValuesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXNUMVALUES_ISSET_ID, value);
  }

  public int getMinCount() {
    return this.minCount;
  }

  public FacetParam setMinCount(int minCount) {
    this.minCount = minCount;
    setMinCountIsSet(true);
    return this;
  }

  public void unsetMinCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINCOUNT_ISSET_ID);
  }

  /** Returns true if field minCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMinCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MINCOUNT_ISSET_ID);
  }

  public void setMinCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINCOUNT_ISSET_ID, value);
  }

  public int getPathSize() {
    return (this.path == null) ? 0 : this.path.size();
  }

  public java.util.Iterator<String> getPathIterator() {
    return (this.path == null) ? null : this.path.iterator();
  }

  public void addToPath(String elem) {
    if (this.path == null) {
      this.path = new ArrayList<String>();
    }
    this.path.add(elem);
  }

  public List<String> getPath() {
    return this.path;
  }

  public FacetParam setPath(List<String> path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((FacetSortMode)value);
      }
      break;

    case MAX_NUM_VALUES:
      if (value == null) {
        unsetMaxNumValues();
      } else {
        setMaxNumValues((Integer)value);
      }
      break;

    case MIN_COUNT:
      if (value == null) {
        unsetMinCount();
      } else {
        setMinCount((Integer)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODE:
      return getMode();

    case MAX_NUM_VALUES:
      return Integer.valueOf(getMaxNumValues());

    case MIN_COUNT:
      return Integer.valueOf(getMinCount());

    case PATH:
      return getPath();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODE:
      return isSetMode();
    case MAX_NUM_VALUES:
      return isSetMaxNumValues();
    case MIN_COUNT:
      return isSetMinCount();
    case PATH:
      return isSetPath();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FacetParam)
      return this.equals((FacetParam)that);
    return false;
  }

  public boolean equals(FacetParam that) {
    if (that == null)
      return false;

    boolean this_present_mode = true && this.isSetMode();
    boolean that_present_mode = true && that.isSetMode();
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (!this.mode.equals(that.mode))
        return false;
    }

    boolean this_present_maxNumValues = true && this.isSetMaxNumValues();
    boolean that_present_maxNumValues = true && that.isSetMaxNumValues();
    if (this_present_maxNumValues || that_present_maxNumValues) {
      if (!(this_present_maxNumValues && that_present_maxNumValues))
        return false;
      if (this.maxNumValues != that.maxNumValues)
        return false;
    }

    boolean this_present_minCount = true && this.isSetMinCount();
    boolean that_present_minCount = true && that.isSetMinCount();
    if (this_present_minCount || that_present_minCount) {
      if (!(this_present_minCount && that_present_minCount))
        return false;
      if (this.minCount != that.minCount)
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FacetParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxNumValues()).compareTo(other.isSetMaxNumValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxNumValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxNumValues, other.maxNumValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinCount()).compareTo(other.isSetMinCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minCount, other.minCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FacetParam(");
    boolean first = true;

    if (isSetMode()) {
      sb.append("mode:");
      if (this.mode == null) {
        sb.append("null");
      } else {
        sb.append(this.mode);
      }
      first = false;
    }
    if (isSetMaxNumValues()) {
      if (!first) sb.append(", ");
      sb.append("maxNumValues:");
      sb.append(this.maxNumValues);
      first = false;
    }
    if (isSetMinCount()) {
      if (!first) sb.append(", ");
      sb.append("minCount:");
      sb.append(this.minCount);
      first = false;
    }
    if (isSetPath()) {
      if (!first) sb.append(", ");
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FacetParamStandardSchemeFactory implements SchemeFactory {
    public FacetParamStandardScheme getScheme() {
      return new FacetParamStandardScheme();
    }
  }

  private static class FacetParamStandardScheme extends StandardScheme<FacetParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FacetParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mode = FacetSortMode.findByValue(iprot.readI32());
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_NUM_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxNumValues = iprot.readI32();
              struct.setMaxNumValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MIN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minCount = iprot.readI32();
              struct.setMinCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.path = new ArrayList<String>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  String _elem10;
                  _elem10 = iprot.readString();
                  struct.path.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FacetParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mode != null) {
        if (struct.isSetMode()) {
          oprot.writeFieldBegin(MODE_FIELD_DESC);
          oprot.writeI32(struct.mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMaxNumValues()) {
        oprot.writeFieldBegin(MAX_NUM_VALUES_FIELD_DESC);
        oprot.writeI32(struct.maxNumValues);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinCount()) {
        oprot.writeFieldBegin(MIN_COUNT_FIELD_DESC);
        oprot.writeI32(struct.minCount);
        oprot.writeFieldEnd();
      }
      if (struct.path != null) {
        if (struct.isSetPath()) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.path.size()));
            for (String _iter11 : struct.path)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FacetParamTupleSchemeFactory implements SchemeFactory {
    public FacetParamTupleScheme getScheme() {
      return new FacetParamTupleScheme();
    }
  }

  private static class FacetParamTupleScheme extends TupleScheme<FacetParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FacetParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMode()) {
        optionals.set(0);
      }
      if (struct.isSetMaxNumValues()) {
        optionals.set(1);
      }
      if (struct.isSetMinCount()) {
        optionals.set(2);
      }
      if (struct.isSetPath()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMode()) {
        oprot.writeI32(struct.mode.getValue());
      }
      if (struct.isSetMaxNumValues()) {
        oprot.writeI32(struct.maxNumValues);
      }
      if (struct.isSetMinCount()) {
        oprot.writeI32(struct.minCount);
      }
      if (struct.isSetPath()) {
        {
          oprot.writeI32(struct.path.size());
          for (String _iter12 : struct.path)
          {
            oprot.writeString(_iter12);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FacetParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.mode = FacetSortMode.findByValue(iprot.readI32());
        struct.setModeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.maxNumValues = iprot.readI32();
        struct.setMaxNumValuesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.minCount = iprot.readI32();
        struct.setMinCountIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.path = new ArrayList<String>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            String _elem15;
            _elem15 = iprot.readString();
            struct.path.add(_elem15);
          }
        }
        struct.setPathIsSet(true);
      }
    }
  }

}

