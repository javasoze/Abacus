/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package abacus.api.query;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Request implements org.apache.thrift.TBase<Request, Request._Fields>, java.io.Serializable, Cloneable, Comparable<Request> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request");

  private static final org.apache.thrift.protocol.TField SELECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("selections", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField FACET_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("facetParams", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField PAGING_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("pagingParam", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SORT_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sortFields", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField QUERY_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("queryString", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXPLAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("explain", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RequestTupleSchemeFactory());
  }

  public Map<String,List<Selection>> selections; // optional
  public Map<String,FacetParam> facetParams; // optional
  public PagingParam pagingParam; // optional
  public List<SortField> sortFields; // optional
  public String queryString; // optional
  public boolean explain; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SELECTIONS((short)1, "selections"),
    FACET_PARAMS((short)2, "facetParams"),
    PAGING_PARAM((short)3, "pagingParam"),
    SORT_FIELDS((short)4, "sortFields"),
    QUERY_STRING((short)5, "queryString"),
    EXPLAIN((short)6, "explain");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SELECTIONS
          return SELECTIONS;
        case 2: // FACET_PARAMS
          return FACET_PARAMS;
        case 3: // PAGING_PARAM
          return PAGING_PARAM;
        case 4: // SORT_FIELDS
          return SORT_FIELDS;
        case 5: // QUERY_STRING
          return QUERY_STRING;
        case 6: // EXPLAIN
          return EXPLAIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPLAIN_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SELECTIONS,_Fields.FACET_PARAMS,_Fields.PAGING_PARAM,_Fields.SORT_FIELDS,_Fields.QUERY_STRING,_Fields.EXPLAIN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SELECTIONS, new org.apache.thrift.meta_data.FieldMetaData("selections", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Selection.class)))));
    tmpMap.put(_Fields.FACET_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("facetParams", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FacetParam.class))));
    tmpMap.put(_Fields.PAGING_PARAM, new org.apache.thrift.meta_data.FieldMetaData("pagingParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PagingParam.class)));
    tmpMap.put(_Fields.SORT_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("sortFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SortField.class))));
    tmpMap.put(_Fields.QUERY_STRING, new org.apache.thrift.meta_data.FieldMetaData("queryString", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPLAIN, new org.apache.thrift.meta_data.FieldMetaData("explain", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request.class, metaDataMap);
  }

  public Request() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request(Request other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSelections()) {
      Map<String,List<Selection>> __this__selections = new HashMap<String,List<Selection>>(other.selections.size());
      for (Map.Entry<String, List<Selection>> other_element : other.selections.entrySet()) {

        String other_element_key = other_element.getKey();
        List<Selection> other_element_value = other_element.getValue();

        String __this__selections_copy_key = other_element_key;

        List<Selection> __this__selections_copy_value = new ArrayList<Selection>(other_element_value.size());
        for (Selection other_element_value_element : other_element_value) {
          __this__selections_copy_value.add(new Selection(other_element_value_element));
        }

        __this__selections.put(__this__selections_copy_key, __this__selections_copy_value);
      }
      this.selections = __this__selections;
    }
    if (other.isSetFacetParams()) {
      Map<String,FacetParam> __this__facetParams = new HashMap<String,FacetParam>(other.facetParams.size());
      for (Map.Entry<String, FacetParam> other_element : other.facetParams.entrySet()) {

        String other_element_key = other_element.getKey();
        FacetParam other_element_value = other_element.getValue();

        String __this__facetParams_copy_key = other_element_key;

        FacetParam __this__facetParams_copy_value = new FacetParam(other_element_value);

        __this__facetParams.put(__this__facetParams_copy_key, __this__facetParams_copy_value);
      }
      this.facetParams = __this__facetParams;
    }
    if (other.isSetPagingParam()) {
      this.pagingParam = new PagingParam(other.pagingParam);
    }
    if (other.isSetSortFields()) {
      List<SortField> __this__sortFields = new ArrayList<SortField>(other.sortFields.size());
      for (SortField other_element : other.sortFields) {
        __this__sortFields.add(new SortField(other_element));
      }
      this.sortFields = __this__sortFields;
    }
    if (other.isSetQueryString()) {
      this.queryString = other.queryString;
    }
    this.explain = other.explain;
  }

  public Request deepCopy() {
    return new Request(this);
  }

  @Override
  public void clear() {
    this.selections = null;
    this.facetParams = null;
    this.pagingParam = null;
    this.sortFields = null;
    this.queryString = null;
    setExplainIsSet(false);
    this.explain = false;
  }

  public int getSelectionsSize() {
    return (this.selections == null) ? 0 : this.selections.size();
  }

  public void putToSelections(String key, List<Selection> val) {
    if (this.selections == null) {
      this.selections = new HashMap<String,List<Selection>>();
    }
    this.selections.put(key, val);
  }

  public Map<String,List<Selection>> getSelections() {
    return this.selections;
  }

  public Request setSelections(Map<String,List<Selection>> selections) {
    this.selections = selections;
    return this;
  }

  public void unsetSelections() {
    this.selections = null;
  }

  /** Returns true if field selections is set (has been assigned a value) and false otherwise */
  public boolean isSetSelections() {
    return this.selections != null;
  }

  public void setSelectionsIsSet(boolean value) {
    if (!value) {
      this.selections = null;
    }
  }

  public int getFacetParamsSize() {
    return (this.facetParams == null) ? 0 : this.facetParams.size();
  }

  public void putToFacetParams(String key, FacetParam val) {
    if (this.facetParams == null) {
      this.facetParams = new HashMap<String,FacetParam>();
    }
    this.facetParams.put(key, val);
  }

  public Map<String,FacetParam> getFacetParams() {
    return this.facetParams;
  }

  public Request setFacetParams(Map<String,FacetParam> facetParams) {
    this.facetParams = facetParams;
    return this;
  }

  public void unsetFacetParams() {
    this.facetParams = null;
  }

  /** Returns true if field facetParams is set (has been assigned a value) and false otherwise */
  public boolean isSetFacetParams() {
    return this.facetParams != null;
  }

  public void setFacetParamsIsSet(boolean value) {
    if (!value) {
      this.facetParams = null;
    }
  }

  public PagingParam getPagingParam() {
    return this.pagingParam;
  }

  public Request setPagingParam(PagingParam pagingParam) {
    this.pagingParam = pagingParam;
    return this;
  }

  public void unsetPagingParam() {
    this.pagingParam = null;
  }

  /** Returns true if field pagingParam is set (has been assigned a value) and false otherwise */
  public boolean isSetPagingParam() {
    return this.pagingParam != null;
  }

  public void setPagingParamIsSet(boolean value) {
    if (!value) {
      this.pagingParam = null;
    }
  }

  public int getSortFieldsSize() {
    return (this.sortFields == null) ? 0 : this.sortFields.size();
  }

  public java.util.Iterator<SortField> getSortFieldsIterator() {
    return (this.sortFields == null) ? null : this.sortFields.iterator();
  }

  public void addToSortFields(SortField elem) {
    if (this.sortFields == null) {
      this.sortFields = new ArrayList<SortField>();
    }
    this.sortFields.add(elem);
  }

  public List<SortField> getSortFields() {
    return this.sortFields;
  }

  public Request setSortFields(List<SortField> sortFields) {
    this.sortFields = sortFields;
    return this;
  }

  public void unsetSortFields() {
    this.sortFields = null;
  }

  /** Returns true if field sortFields is set (has been assigned a value) and false otherwise */
  public boolean isSetSortFields() {
    return this.sortFields != null;
  }

  public void setSortFieldsIsSet(boolean value) {
    if (!value) {
      this.sortFields = null;
    }
  }

  public String getQueryString() {
    return this.queryString;
  }

  public Request setQueryString(String queryString) {
    this.queryString = queryString;
    return this;
  }

  public void unsetQueryString() {
    this.queryString = null;
  }

  /** Returns true if field queryString is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryString() {
    return this.queryString != null;
  }

  public void setQueryStringIsSet(boolean value) {
    if (!value) {
      this.queryString = null;
    }
  }

  public boolean isExplain() {
    return this.explain;
  }

  public Request setExplain(boolean explain) {
    this.explain = explain;
    setExplainIsSet(true);
    return this;
  }

  public void unsetExplain() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPLAIN_ISSET_ID);
  }

  /** Returns true if field explain is set (has been assigned a value) and false otherwise */
  public boolean isSetExplain() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPLAIN_ISSET_ID);
  }

  public void setExplainIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPLAIN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SELECTIONS:
      if (value == null) {
        unsetSelections();
      } else {
        setSelections((Map<String,List<Selection>>)value);
      }
      break;

    case FACET_PARAMS:
      if (value == null) {
        unsetFacetParams();
      } else {
        setFacetParams((Map<String,FacetParam>)value);
      }
      break;

    case PAGING_PARAM:
      if (value == null) {
        unsetPagingParam();
      } else {
        setPagingParam((PagingParam)value);
      }
      break;

    case SORT_FIELDS:
      if (value == null) {
        unsetSortFields();
      } else {
        setSortFields((List<SortField>)value);
      }
      break;

    case QUERY_STRING:
      if (value == null) {
        unsetQueryString();
      } else {
        setQueryString((String)value);
      }
      break;

    case EXPLAIN:
      if (value == null) {
        unsetExplain();
      } else {
        setExplain((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SELECTIONS:
      return getSelections();

    case FACET_PARAMS:
      return getFacetParams();

    case PAGING_PARAM:
      return getPagingParam();

    case SORT_FIELDS:
      return getSortFields();

    case QUERY_STRING:
      return getQueryString();

    case EXPLAIN:
      return Boolean.valueOf(isExplain());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SELECTIONS:
      return isSetSelections();
    case FACET_PARAMS:
      return isSetFacetParams();
    case PAGING_PARAM:
      return isSetPagingParam();
    case SORT_FIELDS:
      return isSetSortFields();
    case QUERY_STRING:
      return isSetQueryString();
    case EXPLAIN:
      return isSetExplain();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Request)
      return this.equals((Request)that);
    return false;
  }

  public boolean equals(Request that) {
    if (that == null)
      return false;

    boolean this_present_selections = true && this.isSetSelections();
    boolean that_present_selections = true && that.isSetSelections();
    if (this_present_selections || that_present_selections) {
      if (!(this_present_selections && that_present_selections))
        return false;
      if (!this.selections.equals(that.selections))
        return false;
    }

    boolean this_present_facetParams = true && this.isSetFacetParams();
    boolean that_present_facetParams = true && that.isSetFacetParams();
    if (this_present_facetParams || that_present_facetParams) {
      if (!(this_present_facetParams && that_present_facetParams))
        return false;
      if (!this.facetParams.equals(that.facetParams))
        return false;
    }

    boolean this_present_pagingParam = true && this.isSetPagingParam();
    boolean that_present_pagingParam = true && that.isSetPagingParam();
    if (this_present_pagingParam || that_present_pagingParam) {
      if (!(this_present_pagingParam && that_present_pagingParam))
        return false;
      if (!this.pagingParam.equals(that.pagingParam))
        return false;
    }

    boolean this_present_sortFields = true && this.isSetSortFields();
    boolean that_present_sortFields = true && that.isSetSortFields();
    if (this_present_sortFields || that_present_sortFields) {
      if (!(this_present_sortFields && that_present_sortFields))
        return false;
      if (!this.sortFields.equals(that.sortFields))
        return false;
    }

    boolean this_present_queryString = true && this.isSetQueryString();
    boolean that_present_queryString = true && that.isSetQueryString();
    if (this_present_queryString || that_present_queryString) {
      if (!(this_present_queryString && that_present_queryString))
        return false;
      if (!this.queryString.equals(that.queryString))
        return false;
    }

    boolean this_present_explain = true && this.isSetExplain();
    boolean that_present_explain = true && that.isSetExplain();
    if (this_present_explain || that_present_explain) {
      if (!(this_present_explain && that_present_explain))
        return false;
      if (this.explain != that.explain)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSelections()).compareTo(other.isSetSelections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selections, other.selections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacetParams()).compareTo(other.isSetFacetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facetParams, other.facetParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPagingParam()).compareTo(other.isSetPagingParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPagingParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagingParam, other.pagingParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortFields()).compareTo(other.isSetSortFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortFields, other.sortFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryString()).compareTo(other.isSetQueryString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryString, other.queryString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExplain()).compareTo(other.isSetExplain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExplain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.explain, other.explain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Request(");
    boolean first = true;

    if (isSetSelections()) {
      sb.append("selections:");
      if (this.selections == null) {
        sb.append("null");
      } else {
        sb.append(this.selections);
      }
      first = false;
    }
    if (isSetFacetParams()) {
      if (!first) sb.append(", ");
      sb.append("facetParams:");
      if (this.facetParams == null) {
        sb.append("null");
      } else {
        sb.append(this.facetParams);
      }
      first = false;
    }
    if (isSetPagingParam()) {
      if (!first) sb.append(", ");
      sb.append("pagingParam:");
      if (this.pagingParam == null) {
        sb.append("null");
      } else {
        sb.append(this.pagingParam);
      }
      first = false;
    }
    if (isSetSortFields()) {
      if (!first) sb.append(", ");
      sb.append("sortFields:");
      if (this.sortFields == null) {
        sb.append("null");
      } else {
        sb.append(this.sortFields);
      }
      first = false;
    }
    if (isSetQueryString()) {
      if (!first) sb.append(", ");
      sb.append("queryString:");
      if (this.queryString == null) {
        sb.append("null");
      } else {
        sb.append(this.queryString);
      }
      first = false;
    }
    if (isSetExplain()) {
      if (!first) sb.append(", ");
      sb.append("explain:");
      sb.append(this.explain);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pagingParam != null) {
      pagingParam.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestStandardSchemeFactory implements SchemeFactory {
    public RequestStandardScheme getScheme() {
      return new RequestStandardScheme();
    }
  }

  private static class RequestStandardScheme extends StandardScheme<Request> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SELECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                struct.selections = new HashMap<String,List<Selection>>(2*_map24.size);
                for (int _i25 = 0; _i25 < _map24.size; ++_i25)
                {
                  String _key26;
                  List<Selection> _val27;
                  _key26 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                    _val27 = new ArrayList<Selection>(_list28.size);
                    for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                    {
                      Selection _elem30;
                      _elem30 = new Selection();
                      _elem30.read(iprot);
                      _val27.add(_elem30);
                    }
                    iprot.readListEnd();
                  }
                  struct.selections.put(_key26, _val27);
                }
                iprot.readMapEnd();
              }
              struct.setSelectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FACET_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map31 = iprot.readMapBegin();
                struct.facetParams = new HashMap<String,FacetParam>(2*_map31.size);
                for (int _i32 = 0; _i32 < _map31.size; ++_i32)
                {
                  String _key33;
                  FacetParam _val34;
                  _key33 = iprot.readString();
                  _val34 = new FacetParam();
                  _val34.read(iprot);
                  struct.facetParams.put(_key33, _val34);
                }
                iprot.readMapEnd();
              }
              struct.setFacetParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGING_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pagingParam = new PagingParam();
              struct.pagingParam.read(iprot);
              struct.setPagingParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SORT_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.sortFields = new ArrayList<SortField>(_list35.size);
                for (int _i36 = 0; _i36 < _list35.size; ++_i36)
                {
                  SortField _elem37;
                  _elem37 = new SortField();
                  _elem37.read(iprot);
                  struct.sortFields.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setSortFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUERY_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryString = iprot.readString();
              struct.setQueryStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPLAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.explain = iprot.readBool();
              struct.setExplainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Request struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.selections != null) {
        if (struct.isSetSelections()) {
          oprot.writeFieldBegin(SELECTIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.selections.size()));
            for (Map.Entry<String, List<Selection>> _iter38 : struct.selections.entrySet())
            {
              oprot.writeString(_iter38.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter38.getValue().size()));
                for (Selection _iter39 : _iter38.getValue())
                {
                  _iter39.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.facetParams != null) {
        if (struct.isSetFacetParams()) {
          oprot.writeFieldBegin(FACET_PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.facetParams.size()));
            for (Map.Entry<String, FacetParam> _iter40 : struct.facetParams.entrySet())
            {
              oprot.writeString(_iter40.getKey());
              _iter40.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.pagingParam != null) {
        if (struct.isSetPagingParam()) {
          oprot.writeFieldBegin(PAGING_PARAM_FIELD_DESC);
          struct.pagingParam.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sortFields != null) {
        if (struct.isSetSortFields()) {
          oprot.writeFieldBegin(SORT_FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sortFields.size()));
            for (SortField _iter41 : struct.sortFields)
            {
              _iter41.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.queryString != null) {
        if (struct.isSetQueryString()) {
          oprot.writeFieldBegin(QUERY_STRING_FIELD_DESC);
          oprot.writeString(struct.queryString);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExplain()) {
        oprot.writeFieldBegin(EXPLAIN_FIELD_DESC);
        oprot.writeBool(struct.explain);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestTupleSchemeFactory implements SchemeFactory {
    public RequestTupleScheme getScheme() {
      return new RequestTupleScheme();
    }
  }

  private static class RequestTupleScheme extends TupleScheme<Request> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSelections()) {
        optionals.set(0);
      }
      if (struct.isSetFacetParams()) {
        optionals.set(1);
      }
      if (struct.isSetPagingParam()) {
        optionals.set(2);
      }
      if (struct.isSetSortFields()) {
        optionals.set(3);
      }
      if (struct.isSetQueryString()) {
        optionals.set(4);
      }
      if (struct.isSetExplain()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSelections()) {
        {
          oprot.writeI32(struct.selections.size());
          for (Map.Entry<String, List<Selection>> _iter42 : struct.selections.entrySet())
          {
            oprot.writeString(_iter42.getKey());
            {
              oprot.writeI32(_iter42.getValue().size());
              for (Selection _iter43 : _iter42.getValue())
              {
                _iter43.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetFacetParams()) {
        {
          oprot.writeI32(struct.facetParams.size());
          for (Map.Entry<String, FacetParam> _iter44 : struct.facetParams.entrySet())
          {
            oprot.writeString(_iter44.getKey());
            _iter44.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetPagingParam()) {
        struct.pagingParam.write(oprot);
      }
      if (struct.isSetSortFields()) {
        {
          oprot.writeI32(struct.sortFields.size());
          for (SortField _iter45 : struct.sortFields)
          {
            _iter45.write(oprot);
          }
        }
      }
      if (struct.isSetQueryString()) {
        oprot.writeString(struct.queryString);
      }
      if (struct.isSetExplain()) {
        oprot.writeBool(struct.explain);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.selections = new HashMap<String,List<Selection>>(2*_map46.size);
          for (int _i47 = 0; _i47 < _map46.size; ++_i47)
          {
            String _key48;
            List<Selection> _val49;
            _key48 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val49 = new ArrayList<Selection>(_list50.size);
              for (int _i51 = 0; _i51 < _list50.size; ++_i51)
              {
                Selection _elem52;
                _elem52 = new Selection();
                _elem52.read(iprot);
                _val49.add(_elem52);
              }
            }
            struct.selections.put(_key48, _val49);
          }
        }
        struct.setSelectionsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map53 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.facetParams = new HashMap<String,FacetParam>(2*_map53.size);
          for (int _i54 = 0; _i54 < _map53.size; ++_i54)
          {
            String _key55;
            FacetParam _val56;
            _key55 = iprot.readString();
            _val56 = new FacetParam();
            _val56.read(iprot);
            struct.facetParams.put(_key55, _val56);
          }
        }
        struct.setFacetParamsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pagingParam = new PagingParam();
        struct.pagingParam.read(iprot);
        struct.setPagingParamIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sortFields = new ArrayList<SortField>(_list57.size);
          for (int _i58 = 0; _i58 < _list57.size; ++_i58)
          {
            SortField _elem59;
            _elem59 = new SortField();
            _elem59.read(iprot);
            struct.sortFields.add(_elem59);
          }
        }
        struct.setSortFieldsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.queryString = iprot.readString();
        struct.setQueryStringIsSet(true);
      }
      if (incoming.get(5)) {
        struct.explain = iprot.readBool();
        struct.setExplainIsSet(true);
      }
    }
  }

}

