/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package abacus.api.query;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ResultSet implements org.apache.thrift.TBase<ResultSet, ResultSet._Fields>, java.io.Serializable, Cloneable, Comparable<ResultSet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResultSet");

  private static final org.apache.thrift.protocol.TField NUM_HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("numHits", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LATENCY_IN_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("latencyInMs", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("resultList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField FACET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("facetList", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResultSetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResultSetTupleSchemeFactory());
  }

  public long numHits; // optional
  public long latencyInMs; // optional
  public List<Result> resultList; // optional
  public Map<String,List<Facet>> facetList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_HITS((short)1, "numHits"),
    LATENCY_IN_MS((short)2, "latencyInMs"),
    RESULT_LIST((short)3, "resultList"),
    FACET_LIST((short)4, "facetList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_HITS
          return NUM_HITS;
        case 2: // LATENCY_IN_MS
          return LATENCY_IN_MS;
        case 3: // RESULT_LIST
          return RESULT_LIST;
        case 4: // FACET_LIST
          return FACET_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMHITS_ISSET_ID = 0;
  private static final int __LATENCYINMS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.NUM_HITS,_Fields.LATENCY_IN_MS,_Fields.RESULT_LIST,_Fields.FACET_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_HITS, new org.apache.thrift.meta_data.FieldMetaData("numHits", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LATENCY_IN_MS, new org.apache.thrift.meta_data.FieldMetaData("latencyInMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESULT_LIST, new org.apache.thrift.meta_data.FieldMetaData("resultList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class))));
    tmpMap.put(_Fields.FACET_LIST, new org.apache.thrift.meta_data.FieldMetaData("facetList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Facet.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResultSet.class, metaDataMap);
  }

  public ResultSet() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResultSet(ResultSet other) {
    __isset_bitfield = other.__isset_bitfield;
    this.numHits = other.numHits;
    this.latencyInMs = other.latencyInMs;
    if (other.isSetResultList()) {
      List<Result> __this__resultList = new ArrayList<Result>(other.resultList.size());
      for (Result other_element : other.resultList) {
        __this__resultList.add(new Result(other_element));
      }
      this.resultList = __this__resultList;
    }
    if (other.isSetFacetList()) {
      Map<String,List<Facet>> __this__facetList = new HashMap<String,List<Facet>>(other.facetList.size());
      for (Map.Entry<String, List<Facet>> other_element : other.facetList.entrySet()) {

        String other_element_key = other_element.getKey();
        List<Facet> other_element_value = other_element.getValue();

        String __this__facetList_copy_key = other_element_key;

        List<Facet> __this__facetList_copy_value = new ArrayList<Facet>(other_element_value.size());
        for (Facet other_element_value_element : other_element_value) {
          __this__facetList_copy_value.add(new Facet(other_element_value_element));
        }

        __this__facetList.put(__this__facetList_copy_key, __this__facetList_copy_value);
      }
      this.facetList = __this__facetList;
    }
  }

  public ResultSet deepCopy() {
    return new ResultSet(this);
  }

  @Override
  public void clear() {
    setNumHitsIsSet(false);
    this.numHits = 0;
    setLatencyInMsIsSet(false);
    this.latencyInMs = 0;
    this.resultList = null;
    this.facetList = null;
  }

  public long getNumHits() {
    return this.numHits;
  }

  public ResultSet setNumHits(long numHits) {
    this.numHits = numHits;
    setNumHitsIsSet(true);
    return this;
  }

  public void unsetNumHits() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMHITS_ISSET_ID);
  }

  /** Returns true if field numHits is set (has been assigned a value) and false otherwise */
  public boolean isSetNumHits() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMHITS_ISSET_ID);
  }

  public void setNumHitsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMHITS_ISSET_ID, value);
  }

  public long getLatencyInMs() {
    return this.latencyInMs;
  }

  public ResultSet setLatencyInMs(long latencyInMs) {
    this.latencyInMs = latencyInMs;
    setLatencyInMsIsSet(true);
    return this;
  }

  public void unsetLatencyInMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATENCYINMS_ISSET_ID);
  }

  /** Returns true if field latencyInMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLatencyInMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LATENCYINMS_ISSET_ID);
  }

  public void setLatencyInMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATENCYINMS_ISSET_ID, value);
  }

  public int getResultListSize() {
    return (this.resultList == null) ? 0 : this.resultList.size();
  }

  public java.util.Iterator<Result> getResultListIterator() {
    return (this.resultList == null) ? null : this.resultList.iterator();
  }

  public void addToResultList(Result elem) {
    if (this.resultList == null) {
      this.resultList = new ArrayList<Result>();
    }
    this.resultList.add(elem);
  }

  public List<Result> getResultList() {
    return this.resultList;
  }

  public ResultSet setResultList(List<Result> resultList) {
    this.resultList = resultList;
    return this;
  }

  public void unsetResultList() {
    this.resultList = null;
  }

  /** Returns true if field resultList is set (has been assigned a value) and false otherwise */
  public boolean isSetResultList() {
    return this.resultList != null;
  }

  public void setResultListIsSet(boolean value) {
    if (!value) {
      this.resultList = null;
    }
  }

  public int getFacetListSize() {
    return (this.facetList == null) ? 0 : this.facetList.size();
  }

  public void putToFacetList(String key, List<Facet> val) {
    if (this.facetList == null) {
      this.facetList = new HashMap<String,List<Facet>>();
    }
    this.facetList.put(key, val);
  }

  public Map<String,List<Facet>> getFacetList() {
    return this.facetList;
  }

  public ResultSet setFacetList(Map<String,List<Facet>> facetList) {
    this.facetList = facetList;
    return this;
  }

  public void unsetFacetList() {
    this.facetList = null;
  }

  /** Returns true if field facetList is set (has been assigned a value) and false otherwise */
  public boolean isSetFacetList() {
    return this.facetList != null;
  }

  public void setFacetListIsSet(boolean value) {
    if (!value) {
      this.facetList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_HITS:
      if (value == null) {
        unsetNumHits();
      } else {
        setNumHits((Long)value);
      }
      break;

    case LATENCY_IN_MS:
      if (value == null) {
        unsetLatencyInMs();
      } else {
        setLatencyInMs((Long)value);
      }
      break;

    case RESULT_LIST:
      if (value == null) {
        unsetResultList();
      } else {
        setResultList((List<Result>)value);
      }
      break;

    case FACET_LIST:
      if (value == null) {
        unsetFacetList();
      } else {
        setFacetList((Map<String,List<Facet>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_HITS:
      return Long.valueOf(getNumHits());

    case LATENCY_IN_MS:
      return Long.valueOf(getLatencyInMs());

    case RESULT_LIST:
      return getResultList();

    case FACET_LIST:
      return getFacetList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_HITS:
      return isSetNumHits();
    case LATENCY_IN_MS:
      return isSetLatencyInMs();
    case RESULT_LIST:
      return isSetResultList();
    case FACET_LIST:
      return isSetFacetList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResultSet)
      return this.equals((ResultSet)that);
    return false;
  }

  public boolean equals(ResultSet that) {
    if (that == null)
      return false;

    boolean this_present_numHits = true && this.isSetNumHits();
    boolean that_present_numHits = true && that.isSetNumHits();
    if (this_present_numHits || that_present_numHits) {
      if (!(this_present_numHits && that_present_numHits))
        return false;
      if (this.numHits != that.numHits)
        return false;
    }

    boolean this_present_latencyInMs = true && this.isSetLatencyInMs();
    boolean that_present_latencyInMs = true && that.isSetLatencyInMs();
    if (this_present_latencyInMs || that_present_latencyInMs) {
      if (!(this_present_latencyInMs && that_present_latencyInMs))
        return false;
      if (this.latencyInMs != that.latencyInMs)
        return false;
    }

    boolean this_present_resultList = true && this.isSetResultList();
    boolean that_present_resultList = true && that.isSetResultList();
    if (this_present_resultList || that_present_resultList) {
      if (!(this_present_resultList && that_present_resultList))
        return false;
      if (!this.resultList.equals(that.resultList))
        return false;
    }

    boolean this_present_facetList = true && this.isSetFacetList();
    boolean that_present_facetList = true && that.isSetFacetList();
    if (this_present_facetList || that_present_facetList) {
      if (!(this_present_facetList && that_present_facetList))
        return false;
      if (!this.facetList.equals(that.facetList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ResultSet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNumHits()).compareTo(other.isSetNumHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumHits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numHits, other.numHits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatencyInMs()).compareTo(other.isSetLatencyInMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatencyInMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latencyInMs, other.latencyInMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultList()).compareTo(other.isSetResultList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultList, other.resultList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacetList()).compareTo(other.isSetFacetList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacetList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facetList, other.facetList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResultSet(");
    boolean first = true;

    if (isSetNumHits()) {
      sb.append("numHits:");
      sb.append(this.numHits);
      first = false;
    }
    if (isSetLatencyInMs()) {
      if (!first) sb.append(", ");
      sb.append("latencyInMs:");
      sb.append(this.latencyInMs);
      first = false;
    }
    if (isSetResultList()) {
      if (!first) sb.append(", ");
      sb.append("resultList:");
      if (this.resultList == null) {
        sb.append("null");
      } else {
        sb.append(this.resultList);
      }
      first = false;
    }
    if (isSetFacetList()) {
      if (!first) sb.append(", ");
      sb.append("facetList:");
      if (this.facetList == null) {
        sb.append("null");
      } else {
        sb.append(this.facetList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResultSetStandardSchemeFactory implements SchemeFactory {
    public ResultSetStandardScheme getScheme() {
      return new ResultSetStandardScheme();
    }
  }

  private static class ResultSetStandardScheme extends StandardScheme<ResultSet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResultSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_HITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numHits = iprot.readI64();
              struct.setNumHitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LATENCY_IN_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.latencyInMs = iprot.readI64();
              struct.setLatencyInMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                struct.resultList = new ArrayList<Result>(_list70.size);
                for (int _i71 = 0; _i71 < _list70.size; ++_i71)
                {
                  Result _elem72;
                  _elem72 = new Result();
                  _elem72.read(iprot);
                  struct.resultList.add(_elem72);
                }
                iprot.readListEnd();
              }
              struct.setResultListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FACET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map73 = iprot.readMapBegin();
                struct.facetList = new HashMap<String,List<Facet>>(2*_map73.size);
                for (int _i74 = 0; _i74 < _map73.size; ++_i74)
                {
                  String _key75;
                  List<Facet> _val76;
                  _key75 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list77 = iprot.readListBegin();
                    _val76 = new ArrayList<Facet>(_list77.size);
                    for (int _i78 = 0; _i78 < _list77.size; ++_i78)
                    {
                      Facet _elem79;
                      _elem79 = new Facet();
                      _elem79.read(iprot);
                      _val76.add(_elem79);
                    }
                    iprot.readListEnd();
                  }
                  struct.facetList.put(_key75, _val76);
                }
                iprot.readMapEnd();
              }
              struct.setFacetListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResultSet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetNumHits()) {
        oprot.writeFieldBegin(NUM_HITS_FIELD_DESC);
        oprot.writeI64(struct.numHits);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLatencyInMs()) {
        oprot.writeFieldBegin(LATENCY_IN_MS_FIELD_DESC);
        oprot.writeI64(struct.latencyInMs);
        oprot.writeFieldEnd();
      }
      if (struct.resultList != null) {
        if (struct.isSetResultList()) {
          oprot.writeFieldBegin(RESULT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resultList.size()));
            for (Result _iter80 : struct.resultList)
            {
              _iter80.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.facetList != null) {
        if (struct.isSetFacetList()) {
          oprot.writeFieldBegin(FACET_LIST_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.facetList.size()));
            for (Map.Entry<String, List<Facet>> _iter81 : struct.facetList.entrySet())
            {
              oprot.writeString(_iter81.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter81.getValue().size()));
                for (Facet _iter82 : _iter81.getValue())
                {
                  _iter82.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResultSetTupleSchemeFactory implements SchemeFactory {
    public ResultSetTupleScheme getScheme() {
      return new ResultSetTupleScheme();
    }
  }

  private static class ResultSetTupleScheme extends TupleScheme<ResultSet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResultSet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNumHits()) {
        optionals.set(0);
      }
      if (struct.isSetLatencyInMs()) {
        optionals.set(1);
      }
      if (struct.isSetResultList()) {
        optionals.set(2);
      }
      if (struct.isSetFacetList()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetNumHits()) {
        oprot.writeI64(struct.numHits);
      }
      if (struct.isSetLatencyInMs()) {
        oprot.writeI64(struct.latencyInMs);
      }
      if (struct.isSetResultList()) {
        {
          oprot.writeI32(struct.resultList.size());
          for (Result _iter83 : struct.resultList)
          {
            _iter83.write(oprot);
          }
        }
      }
      if (struct.isSetFacetList()) {
        {
          oprot.writeI32(struct.facetList.size());
          for (Map.Entry<String, List<Facet>> _iter84 : struct.facetList.entrySet())
          {
            oprot.writeString(_iter84.getKey());
            {
              oprot.writeI32(_iter84.getValue().size());
              for (Facet _iter85 : _iter84.getValue())
              {
                _iter85.write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResultSet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.numHits = iprot.readI64();
        struct.setNumHitsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.latencyInMs = iprot.readI64();
        struct.setLatencyInMsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list86 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.resultList = new ArrayList<Result>(_list86.size);
          for (int _i87 = 0; _i87 < _list86.size; ++_i87)
          {
            Result _elem88;
            _elem88 = new Result();
            _elem88.read(iprot);
            struct.resultList.add(_elem88);
          }
        }
        struct.setResultListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map89 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.facetList = new HashMap<String,List<Facet>>(2*_map89.size);
          for (int _i90 = 0; _i90 < _map89.size; ++_i90)
          {
            String _key91;
            List<Facet> _val92;
            _key91 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val92 = new ArrayList<Facet>(_list93.size);
              for (int _i94 = 0; _i94 < _list93.size; ++_i94)
              {
                Facet _elem95;
                _elem95 = new Facet();
                _elem95.read(iprot);
                _val92.add(_elem95);
              }
            }
            struct.facetList.put(_key91, _val92);
          }
        }
        struct.setFacetListIsSet(true);
      }
    }
  }

}

